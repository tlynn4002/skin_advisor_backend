# main.py
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional
from fastapi.middleware.cors import CORSMiddleware
import requests
from transformers import pipeline

# ==== Hugging Face Inference API ====
MODEL_NAME = "lingling707/vit5-skinbot"
HF_API_URL = f"https://api-inference.huggingface.co/models/{MODEL_NAME}"

# N·∫øu model public th√¨ headers c√≥ th·ªÉ ƒë·ªÉ tr·ªëng {}
# N·∫øu private th√¨ t·∫°o secret tr√™n Render: HF_API_TOKEN
HF_HEADERS = {}

# ==== Model ph√¢n lo·∫°i ·∫£nh da (nh·∫π, load local) ====
image_model = pipeline("image-classification", model="dima806/skin_types_image_detection")

# ==== FastAPI setup ====
app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ==== Request body ====
class RequestData(BaseModel):
    userMessage: str
    imageUrl: Optional[str] = None

# ==== Map label sang m√¥ t·∫£ ti·∫øng Vi·ªát ====
def map_labels_to_skin_type(label: str):
    label = label.lower()
    if label == "oily":
        return "da d·∫ßu, d·ªÖ n·ªïi m·ª•n"
    elif label == "dry":
        return "da kh√¥, c√≥ th·ªÉ bong tr√≥c ho·∫∑c l√£o h√≥a s·ªõm"
    elif label == "normal":
        return "da th∆∞·ªùng, c√¢n b·∫±ng"
    else:
        return "kh√¥ng x√°c ƒë·ªãnh r√µ lo·∫°i da"

# ==== H√†m g·ªçi Hugging Face API ====
def query_hf_model(prompt: str):
    try:
        response = requests.post(
            HF_API_URL,
            headers=HF_HEADERS,
            json={"inputs": prompt}
        )
        if response.status_code == 200:
            data = response.json()
            if isinstance(data, list) and len(data) > 0 and "generated_text" in data[0]:
                return data[0]["generated_text"].strip()
            return "Xin l·ªói, m√¨nh ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi ph√π h·ª£p."
        else:
            print("HF API error:", response.text)
            return "Xin l·ªói, bot ch∆∞a tr·∫£ l·ªùi ƒë∆∞·ª£c. Vui l√≤ng th·ª≠ l·∫°i."
    except Exception as e:
        print("HF API exception:", e)
        return "C√≥ l·ªói khi g·ªçi Hugging Face API."

# ==== Routes ====
@app.get("/")
async def root():
    return {"message": "Skin Advisor API (Vit5 on Hugging Face API) is running üöÄ"}

@app.post("/skinAdvisor")
async def skin_advisor(data: RequestData):
    skin_analysis = ""

    # N·∫øu c√≥ ·∫£nh th√¨ ph√¢n t√≠ch da
    if data.imageUrl and data.imageUrl.startswith(("http://","https://")):
        try:
            results = image_model(data.imageUrl)
            top = max(results, key=lambda x: x['score'])
            skin_type = map_labels_to_skin_type(top['label'])
            skin_analysis = f"·∫¢nh ph√¢n t√≠ch cho th·∫•y: {skin_type}."
        except Exception as e:
            print("Image analysis error:", e)
            skin_analysis = "Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh da."

    # Prompt chatbot
    if skin_analysis:
        prompt = (
            f"B·∫°n l√† chuy√™n gia t∆∞ v·∫•n chƒÉm s√≥c da. "
            f"{skin_analysis} "
            f"Ng∆∞·ªùi d√πng h·ªèi: {data.userMessage}. "
            "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, b·∫±ng ti·∫øng Vi·ªát, "
            "g·ªìm c·∫£ nh·∫≠n x√©t v·ªÅ t√¨nh tr·∫°ng da v√† g·ª£i √Ω ph∆∞∆°ng h∆∞·ªõng chƒÉm s√≥c. "
            "Tuy·ªát ƒë·ªëi kh√¥ng g·ª£i √Ω nguy hi·ªÉm."
        )
    else:
        prompt = (
            "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n chƒÉm s√≥c da. "
            f"Ng∆∞·ªùi d√πng h·ªèi: {data.userMessage}. "
            "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, b·∫±ng ti·∫øng Vi·ªát, "
            "ch·ªâ t∆∞ v·∫•n chƒÉm s√≥c da, tuy·ªát ƒë·ªëi kh√¥ng g·ª£i √Ω nguy hi·ªÉm."
        )

    reply = query_hf_model(prompt)
    return {"reply": reply}
