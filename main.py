from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional
import requests
from fastapi.middleware.cors import CORSMiddleware
import os

# ==== Hugging Face Inference API ====
HF_TOKEN = os.getenv("HF_TOKEN")  # b·∫°n ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng HF_TOKEN trong Render
MODEL_NAME = "lingling707/vit5-skinbot"
API_URL = f"https://api-inference.huggingface.co/models/{MODEL_NAME}"
headers = {"Authorization": f"Bearer {HF_TOKEN}"}

# ==== Model ph√¢n lo·∫°i ·∫£nh da (Inference API) ====
IMAGE_MODEL = "dima806/skin_types_image_detection"
IMAGE_API_URL = f"https://api-inference.huggingface.co/models/{IMAGE_MODEL}"


def query(payload, url):
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code != 200:
        print("HF API error:", response.text)
        return None
    return response.json()


# ==== FastAPI setup ====
app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ==== Request body ====
class RequestData(BaseModel):
    userMessage: str
    imageUrl: Optional[str] = None


# ==== Mapping label -> skin type ====
def map_labels_to_skin_type(predictions):
    if not predictions:
        return "kh√¥ng r√µ"
    labels = [p["label"].lower() for p in predictions]
    if any(x in labels for x in ["acne", "pimple", "oily"]):
        return "da d·∫ßu, d·ªÖ n·ªïi m·ª•n"
    elif any(x in labels for x in ["wrinkle", "dry"]):
        return "da kh√¥, c√≥ d·∫•u hi·ªáu l√£o ho√°"
    elif any(x in labels for x in ["redness", "sensitive"]):
        return "da nh·∫°y c·∫£m"
    elif any(x in labels for x in ["blemish", "freckles"]):
        return "da h·ªón h·ª£p"
    elif "normal" in labels:
        return "da th∆∞·ªùng"
    else:
        return "kh√¥ng r√µ, c·∫ßn th√™m ·∫£nh ch·∫•t l∆∞·ª£ng h∆°n"


# ==== Routes ====
@app.get("/")
async def root():
    return {"message": "Skin Advisor API (Vit5 via HF Inference API) is running üöÄ"}


@app.post("/skinAdvisor")
async def skin_advisor(data: RequestData):
    skin_analysis = ""

    # N·∫øu c√≥ ·∫£nh th√¨ ph√¢n t√≠ch da
    if data.imageUrl and data.imageUrl.startswith(("http://", "https://")):
        try:
            results = query({"inputs": data.imageUrl}, IMAGE_API_URL)
            skin_type = map_labels_to_skin_type(results)
            skin_analysis = f"·∫¢nh ph√¢n t√≠ch cho th·∫•y: {skin_type}."
        except Exception as e:
            print("Image model error:", e)
            skin_analysis = "Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh da."

    # Gh√©p prompt
    if skin_analysis:
        prompt = (
            f"B·∫°n l√† chuy√™n gia t∆∞ v·∫•n chƒÉm s√≥c da. "
            f"{skin_analysis} "
            f"Ng∆∞·ªùi d√πng h·ªèi: {data.userMessage}. "
            "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, b·∫±ng ti·∫øng Vi·ªát, "
            "g·ªìm c·∫£ nh·∫≠n x√©t v·ªÅ t√¨nh tr·∫°ng da v√† g·ª£i √Ω ph∆∞∆°ng h∆∞·ªõng chƒÉm s√≥c. "
            "Tuy·ªát ƒë·ªëi kh√¥ng g·ª£i √Ω nguy hi·ªÉm."
        )
    else:
        prompt = (
            "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n chƒÉm s√≥c da. "
            f"Ng∆∞·ªùi d√πng h·ªèi: {data.userMessage}. "
            "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, b·∫±ng ti·∫øng Vi·ªát, "
            "ch·ªâ t∆∞ v·∫•n chƒÉm s√≥c da, tuy·ªát ƒë·ªëi kh√¥ng g·ª£i √Ω nguy hi·ªÉm."
        )

    try:
        result = query({"inputs": prompt, "parameters": {"max_new_tokens": 120}}, API_URL)
        reply = result[0]["generated_text"].strip() if result else None
        if not reply:
            reply = "Xin l·ªói, m√¨nh ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi ph√π h·ª£p."
    except Exception as e:
        print("Chatbot error:", e)
        reply = "Xin l·ªói, bot ch∆∞a tr·∫£ l·ªùi ƒë∆∞·ª£c. Vui l√≤ng th·ª≠ l·∫°i."

    return {"reply": reply}
